{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Netguru Interview Documentation \u00b6 General Information \u00b6 For requirements, general consideration and overview of this project, set-up information and chosen technical stack, please see our Getting Started guide. Infrastructure Architecture \u00b6 For detailed infrastructure architecture (Kubernetes) and how things are deployed using Terraform, please see our infrastructure architecture page. Application Architecture \u00b6 For detailed application architecture (Flask) and how pieces are working together, please see our application architecture page. Helm Package \u00b6 Packaging of applicaion is done using Helm. For detailed description of Kubernetes resources used inside, please see our helm package page. Example Preview Environment \u00b6 For detailed examples about what this projects can do and how example preview environment can be spinned up, please see our documentation by example page.","title":"Overview"},{"location":"#netguru-interview-documentation","text":"","title":"Netguru Interview Documentation"},{"location":"#general-information","text":"For requirements, general consideration and overview of this project, set-up information and chosen technical stack, please see our Getting Started guide.","title":"General Information"},{"location":"#infrastructure-architecture","text":"For detailed infrastructure architecture (Kubernetes) and how things are deployed using Terraform, please see our infrastructure architecture page.","title":"Infrastructure Architecture"},{"location":"#application-architecture","text":"For detailed application architecture (Flask) and how pieces are working together, please see our application architecture page.","title":"Application Architecture"},{"location":"#helm-package","text":"Packaging of applicaion is done using Helm. For detailed description of Kubernetes resources used inside, please see our helm package page.","title":"Helm Package"},{"location":"#example-preview-environment","text":"For detailed examples about what this projects can do and how example preview environment can be spinned up, please see our documentation by example page.","title":"Example Preview Environment"},{"location":"application-architecture/","text":"Application Architecture \u00b6 Built using Flask & PostgreSQL. Flask Main Page \u00b6 Flask Registration Page \u00b6 Flask Add Blog Post \u00b6","title":"Application"},{"location":"application-architecture/#application-architecture","text":"Built using Flask & PostgreSQL.","title":"Application Architecture"},{"location":"application-architecture/#flask-main-page","text":"","title":"Flask Main Page"},{"location":"application-architecture/#flask-registration-page","text":"","title":"Flask Registration Page"},{"location":"application-architecture/#flask-add-blog-post","text":"","title":"Flask Add Blog Post"},{"location":"getting-started/","text":"Getting Started \u00b6 This project serves as a fully working and tested solution for deploying preview environments for your Pull Requests so you can get fast feedback before changes are merged to master. This allows you to avoid having human approval inside your release pipeline to speed up delivery of changes merged to master. When the Preview Environment is up and running GitHub Action Bot will comment on your Pull Request with a link so in one click your team members can try out the preview. Typically the creation of preview environments is automated inside the GitHub Workflow of application source code repository. Technologies used \u00b6 Terraform 1 is used to provision infrastructure resources like VPC, compute instances, DNS records. K3s 2 was chosen as a leightweight Kubernetes platform of choice for running applications in Cloud environment. OVH 3 public cloud is used as a Cloud provider for hosting K3s. DigitalOcean 4 is used to mnanage DNS records of K3s cluster (exposing controller and infrastructure resources to the outside world) as well as smaller pieces like applications hosted on top of K3s (e.g. Traefik). Flask 5 is used as web framework to build an example application - Blog. All Docker images are stored in public DockerHub 6 registry. Entire source code is stored in GitHub 's netguru-interview organisation. GitHub Actions 7 are used for continuous integration, running tests, building application's Docker image. ArgoCD 8 is used for continuous deployment part of the process. K3s: Lightweight Kubernetes. \u21a9 Use Infrastructure as Code to provision and manage any cloud, infrastructure, or service. \u21a9 The OVHcloud Public Cloud offers you a large number of cloud solutions that are billed on a pay-as-you-go basis. \u21a9 DigitalOcean's DNS tools let you manage DNS records for non-DigitalOcean resources. \u21a9 Flask is a micro web framework written in Python. \u21a9 Storing and distribution system for named Docker images. \u21a9 GitHub Actions enables you to create custom software development life cycle (SDLC) workflows directly in your GitHub repository. \u21a9 Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. \u21a9","title":"Getting started"},{"location":"getting-started/#getting-started","text":"This project serves as a fully working and tested solution for deploying preview environments for your Pull Requests so you can get fast feedback before changes are merged to master. This allows you to avoid having human approval inside your release pipeline to speed up delivery of changes merged to master. When the Preview Environment is up and running GitHub Action Bot will comment on your Pull Request with a link so in one click your team members can try out the preview. Typically the creation of preview environments is automated inside the GitHub Workflow of application source code repository.","title":"Getting Started"},{"location":"getting-started/#technologies-used","text":"Terraform 1 is used to provision infrastructure resources like VPC, compute instances, DNS records. K3s 2 was chosen as a leightweight Kubernetes platform of choice for running applications in Cloud environment. OVH 3 public cloud is used as a Cloud provider for hosting K3s. DigitalOcean 4 is used to mnanage DNS records of K3s cluster (exposing controller and infrastructure resources to the outside world) as well as smaller pieces like applications hosted on top of K3s (e.g. Traefik). Flask 5 is used as web framework to build an example application - Blog. All Docker images are stored in public DockerHub 6 registry. Entire source code is stored in GitHub 's netguru-interview organisation. GitHub Actions 7 are used for continuous integration, running tests, building application's Docker image. ArgoCD 8 is used for continuous deployment part of the process. K3s: Lightweight Kubernetes. \u21a9 Use Infrastructure as Code to provision and manage any cloud, infrastructure, or service. \u21a9 The OVHcloud Public Cloud offers you a large number of cloud solutions that are billed on a pay-as-you-go basis. \u21a9 DigitalOcean's DNS tools let you manage DNS records for non-DigitalOcean resources. \u21a9 Flask is a micro web framework written in Python. \u21a9 Storing and distribution system for named Docker images. \u21a9 GitHub Actions enables you to create custom software development life cycle (SDLC) workflows directly in your GitHub repository. \u21a9 Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. \u21a9","title":"Technologies used"},{"location":"helm-package/","text":"Helm Package \u00b6 Helm package structure with dependencies (postgresql). IngressRoute is installed using Traefik CRD, hence can't be visualized using IcePanel .","title":"Helm package"},{"location":"helm-package/#helm-package","text":"Helm package structure with dependencies (postgresql). IngressRoute is installed using Traefik CRD, hence can't be visualized using IcePanel .","title":"Helm Package"},{"location":"infrastructure-architecture/","text":"Infrastructure Architecture \u00b6 Terraform Infrastructure Overview \u00b6 A set of terraform modules deploy a secure, functional k3s cluster on OVH . Why not Kubespray? \u00b6 Deployment follows the hobby-kube guidelines for setting up a secure Kubernetes cluster. Following cloud-native projects are installed as a part of deployment: traefik cert-manger metallb argocd Dependencies \u00b6 The following is required to be installed on your system: terraform jq kubectl Deployment \u00b6 Clone the repository: $ git clone git@github.com:netguru-interview/terraform-k3s.git Copy example.tfvars to terraform.tfvars $ cp example.tfvars terraform.tfvars Using your favourite editor, update values in terraform.tfvars marked required: $ vim terraform.tfvars # DNS Settings create_zone = \"true\" domain = \"kloud-native.com\" digitalocean_token = <required> Run terraform init to initalize modules: $ terraform init Run terraform plan to view changes terraform will make: $ terraform apply Run terraform apply to create your resources: $ terraform apply --auto-approve Set KUBECONFIG : eval $( terraform output kubeconfig ) Check resources kubectl get po -A -o wide NAMESPACE NAME READY STATUS RESTARTS AGE kube-system pod/kube-flannel-ds-amd64-w6qx9 1 /1 Running 0 16h kube-system pod/metrics-server-7566d596c8-xj86w 1 /1 Running 0 16h kube-system pod/coredns-7944c66d8d-qnvcj 1 /1 Running 0 16h kube-system pod/local-path-provisioner-6d59f47c7-s4pl6 1 /1 Running 0 16h kube-system pod/kube-flannel-ds-amd64-n6vks 1 /1 Running 0 16h cert-manager pod/cert-manager-cainjector-678b44fb8c-9mf9h 1 /1 Running 0 16h cert-manager pod/cert-manager-65b665b74d-8bjkg 1 /1 Running 0 16h cert-manager pod/cert-manager-webhook-57d5ffc9cb-j8cbx 1 /1 Running 0 16h default pod/traefik-cb68d6bf5-nlhzr 1 /1 Running 0 16h argocd pod/latest-argocd-redis-654b77c6cd-g6ffw 1 /1 Running 0 16h metallb-system pod/controller-7694dcd576-kbqbq 1 /1 Running 0 16h metallb-system pod/speaker-gjbpz 1 /1 Running 0 16h metallb-system pod/speaker-gf7tv 1 /1 Running 0 16h argocd pod/latest-argocd-application-controller-5b99488c78-hxpsq 1 /1 Running 0 16h argocd pod/latest-argocd-dex-server-9c65dfd7-brvvt 1 /1 Running 3 16h argocd pod/latest-argocd-server-575d57c745-gv5w9 1 /1 Running 0 16h argocd pod/latest-argocd-repo-server-54d5499fc6-8wrvs 1 /1 Running 0 16h NAMESPACE NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE default service/kubernetes ClusterIP 10 .43.0.1 <none> 443 /TCP 16h kube-system service/kube-dns ClusterIP 10 .43.0.10 <none> 53 /UDP,53/TCP,9153/TCP 16h kube-system service/metrics-server ClusterIP 10 .43.247.198 <none> 443 /TCP 16h cert-manager service/cert-manager ClusterIP 10 .43.236.173 <none> 9402 /TCP 16h cert-manager service/cert-manager-webhook ClusterIP 10 .43.208.42 <none> 443 /TCP 16h argocd service/latest-argocd-redis ClusterIP 10 .43.45.175 <none> 6379 /TCP 16h argocd service/latest-argocd-dex-server ClusterIP 10 .43.2.73 <none> 5556 /TCP,5557/TCP 16h argocd service/latest-argocd-server ClusterIP 10 .43.230.232 <none> 80 /TCP,443/TCP 16h argocd service/latest-argocd-repo-server ClusterIP 10 .43.197.228 <none> 8081 /TCP 16h argocd service/latest-argocd-application-controller ClusterIP 10 .43.161.54 <none> 8082 /TCP 16h default service/traefik LoadBalancer 10 .43.66.104 <redacted> 80 :31722/TCP,443:30011/TCP 16h NAMESPACE NAME DESIRED CURRENT READY UP-TO-DATE AVAILABLE NODE SELECTOR AGE kube-system daemonset.apps/kube-flannel-ds-amd64 2 2 2 2 2 <none> 16h metallb-system daemonset.apps/speaker 2 2 2 2 2 beta.kubernetes.io/os = linux 16h NAMESPACE NAME READY UP-TO-DATE AVAILABLE AGE kube-system deployment.apps/metrics-server 1 /1 1 1 16h kube-system deployment.apps/coredns 1 /1 1 1 16h kube-system deployment.apps/local-path-provisioner 1 /1 1 1 16h cert-manager deployment.apps/cert-manager-cainjector 1 /1 1 1 16h cert-manager deployment.apps/cert-manager 1 /1 1 1 16h cert-manager deployment.apps/cert-manager-webhook 1 /1 1 1 16h default deployment.apps/traefik 1 /1 1 1 16h argocd deployment.apps/latest-argocd-redis 1 /1 1 1 16h metallb-system deployment.apps/controller 1 /1 1 1 16h argocd deployment.apps/latest-argocd-application-controller 1 /1 1 1 16h argocd deployment.apps/latest-argocd-dex-server 1 /1 1 1 16h argocd deployment.apps/latest-argocd-server 1 /1 1 1 16h argocd deployment.apps/latest-argocd-repo-server 1 /1 1 1 16h NAMESPACE NAME DESIRED CURRENT READY AGE kube-system replicaset.apps/metrics-server-7566d596c8 1 1 1 16h kube-system replicaset.apps/coredns-7944c66d8d 1 1 1 16h kube-system replicaset.apps/local-path-provisioner-6d59f47c7 1 1 1 16h cert-manager replicaset.apps/cert-manager-cainjector-678b44fb8c 1 1 1 16h cert-manager replicaset.apps/cert-manager-65b665b74d 1 1 1 16h cert-manager replicaset.apps/cert-manager-webhook-57d5ffc9cb 1 1 1 16h default replicaset.apps/traefik-cb68d6bf5 1 1 1 16h argocd replicaset.apps/latest-argocd-redis-654b77c6cd 1 1 1 16h metallb-system replicaset.apps/controller-7694dcd576 1 1 1 16h argocd replicaset.apps/latest-argocd-application-controller-5b99488c78 1 1 1 16h argocd replicaset.apps/latest-argocd-dex-server-9c65dfd7 1 1 1 16h argocd replicaset.apps/latest-argocd-server-575d57c745 1 1 1 16h argocd replicaset.apps/latest-argocd-repo-server-54d5499fc6 1 1 1 16h SSH to master with eval $(terraform output ssh-master) : eval $( terraform output ssh-master )","title":"Infrastructure"},{"location":"infrastructure-architecture/#infrastructure-architecture","text":"","title":"Infrastructure Architecture"},{"location":"infrastructure-architecture/#terraform-infrastructure-overview","text":"A set of terraform modules deploy a secure, functional k3s cluster on OVH .","title":"Terraform Infrastructure Overview"},{"location":"infrastructure-architecture/#why-not-kubespray","text":"Deployment follows the hobby-kube guidelines for setting up a secure Kubernetes cluster. Following cloud-native projects are installed as a part of deployment: traefik cert-manger metallb argocd","title":"Why not Kubespray?"},{"location":"infrastructure-architecture/#dependencies","text":"The following is required to be installed on your system: terraform jq kubectl","title":"Dependencies"},{"location":"infrastructure-architecture/#deployment","text":"Clone the repository: $ git clone git@github.com:netguru-interview/terraform-k3s.git Copy example.tfvars to terraform.tfvars $ cp example.tfvars terraform.tfvars Using your favourite editor, update values in terraform.tfvars marked required: $ vim terraform.tfvars # DNS Settings create_zone = \"true\" domain = \"kloud-native.com\" digitalocean_token = <required> Run terraform init to initalize modules: $ terraform init Run terraform plan to view changes terraform will make: $ terraform apply Run terraform apply to create your resources: $ terraform apply --auto-approve Set KUBECONFIG : eval $( terraform output kubeconfig ) Check resources kubectl get po -A -o wide NAMESPACE NAME READY STATUS RESTARTS AGE kube-system pod/kube-flannel-ds-amd64-w6qx9 1 /1 Running 0 16h kube-system pod/metrics-server-7566d596c8-xj86w 1 /1 Running 0 16h kube-system pod/coredns-7944c66d8d-qnvcj 1 /1 Running 0 16h kube-system pod/local-path-provisioner-6d59f47c7-s4pl6 1 /1 Running 0 16h kube-system pod/kube-flannel-ds-amd64-n6vks 1 /1 Running 0 16h cert-manager pod/cert-manager-cainjector-678b44fb8c-9mf9h 1 /1 Running 0 16h cert-manager pod/cert-manager-65b665b74d-8bjkg 1 /1 Running 0 16h cert-manager pod/cert-manager-webhook-57d5ffc9cb-j8cbx 1 /1 Running 0 16h default pod/traefik-cb68d6bf5-nlhzr 1 /1 Running 0 16h argocd pod/latest-argocd-redis-654b77c6cd-g6ffw 1 /1 Running 0 16h metallb-system pod/controller-7694dcd576-kbqbq 1 /1 Running 0 16h metallb-system pod/speaker-gjbpz 1 /1 Running 0 16h metallb-system pod/speaker-gf7tv 1 /1 Running 0 16h argocd pod/latest-argocd-application-controller-5b99488c78-hxpsq 1 /1 Running 0 16h argocd pod/latest-argocd-dex-server-9c65dfd7-brvvt 1 /1 Running 3 16h argocd pod/latest-argocd-server-575d57c745-gv5w9 1 /1 Running 0 16h argocd pod/latest-argocd-repo-server-54d5499fc6-8wrvs 1 /1 Running 0 16h NAMESPACE NAME TYPE CLUSTER-IP EXTERNAL-IP PORT ( S ) AGE default service/kubernetes ClusterIP 10 .43.0.1 <none> 443 /TCP 16h kube-system service/kube-dns ClusterIP 10 .43.0.10 <none> 53 /UDP,53/TCP,9153/TCP 16h kube-system service/metrics-server ClusterIP 10 .43.247.198 <none> 443 /TCP 16h cert-manager service/cert-manager ClusterIP 10 .43.236.173 <none> 9402 /TCP 16h cert-manager service/cert-manager-webhook ClusterIP 10 .43.208.42 <none> 443 /TCP 16h argocd service/latest-argocd-redis ClusterIP 10 .43.45.175 <none> 6379 /TCP 16h argocd service/latest-argocd-dex-server ClusterIP 10 .43.2.73 <none> 5556 /TCP,5557/TCP 16h argocd service/latest-argocd-server ClusterIP 10 .43.230.232 <none> 80 /TCP,443/TCP 16h argocd service/latest-argocd-repo-server ClusterIP 10 .43.197.228 <none> 8081 /TCP 16h argocd service/latest-argocd-application-controller ClusterIP 10 .43.161.54 <none> 8082 /TCP 16h default service/traefik LoadBalancer 10 .43.66.104 <redacted> 80 :31722/TCP,443:30011/TCP 16h NAMESPACE NAME DESIRED CURRENT READY UP-TO-DATE AVAILABLE NODE SELECTOR AGE kube-system daemonset.apps/kube-flannel-ds-amd64 2 2 2 2 2 <none> 16h metallb-system daemonset.apps/speaker 2 2 2 2 2 beta.kubernetes.io/os = linux 16h NAMESPACE NAME READY UP-TO-DATE AVAILABLE AGE kube-system deployment.apps/metrics-server 1 /1 1 1 16h kube-system deployment.apps/coredns 1 /1 1 1 16h kube-system deployment.apps/local-path-provisioner 1 /1 1 1 16h cert-manager deployment.apps/cert-manager-cainjector 1 /1 1 1 16h cert-manager deployment.apps/cert-manager 1 /1 1 1 16h cert-manager deployment.apps/cert-manager-webhook 1 /1 1 1 16h default deployment.apps/traefik 1 /1 1 1 16h argocd deployment.apps/latest-argocd-redis 1 /1 1 1 16h metallb-system deployment.apps/controller 1 /1 1 1 16h argocd deployment.apps/latest-argocd-application-controller 1 /1 1 1 16h argocd deployment.apps/latest-argocd-dex-server 1 /1 1 1 16h argocd deployment.apps/latest-argocd-server 1 /1 1 1 16h argocd deployment.apps/latest-argocd-repo-server 1 /1 1 1 16h NAMESPACE NAME DESIRED CURRENT READY AGE kube-system replicaset.apps/metrics-server-7566d596c8 1 1 1 16h kube-system replicaset.apps/coredns-7944c66d8d 1 1 1 16h kube-system replicaset.apps/local-path-provisioner-6d59f47c7 1 1 1 16h cert-manager replicaset.apps/cert-manager-cainjector-678b44fb8c 1 1 1 16h cert-manager replicaset.apps/cert-manager-65b665b74d 1 1 1 16h cert-manager replicaset.apps/cert-manager-webhook-57d5ffc9cb 1 1 1 16h default replicaset.apps/traefik-cb68d6bf5 1 1 1 16h argocd replicaset.apps/latest-argocd-redis-654b77c6cd 1 1 1 16h metallb-system replicaset.apps/controller-7694dcd576 1 1 1 16h argocd replicaset.apps/latest-argocd-application-controller-5b99488c78 1 1 1 16h argocd replicaset.apps/latest-argocd-dex-server-9c65dfd7 1 1 1 16h argocd replicaset.apps/latest-argocd-server-575d57c745 1 1 1 16h argocd replicaset.apps/latest-argocd-repo-server-54d5499fc6 1 1 1 16h SSH to master with eval $(terraform output ssh-master) : eval $( terraform output ssh-master )","title":"Deployment"},{"location":"preview-environment-example/","text":"Preview Environment Example \u00b6 Generating a preview environment \u00b6 When the developer makes the change to their branch, with the ultimate goal of merging those branch changes into the master branch for deployment to production, they save their changes from within their integrated development environment (IDE) and commit it to the source repository, such as GitHub. The process to generate a preview environment is typically like committing code in a traditional development environment: A developer makes a branch to their local cloned source repository to create a new feature: $ git clone git@github.com:netguru-interview/blog.git $ cd blog $ git checkout -b DEV-feature1 The developer makes changes to the source code in their branch and adds the affected files to the commit queue: $ git add backend/flaskblog/models.py The developer commits the files adding a comment about what has changed: $ git commit -m \"added user model\" The developer runs git push to send the code back to the remote repository and create a pull request: $ git push origin DEV-feature1 Git CLI displays a link to create a pull request. The developer can highlight the URL, right-click and choose Open URL to see the GitHub page in their browser. GitHub Workflow creates a preview environment in the PR for the application changes and displays a link to evaluate the new feature: The preview environment is created whenever a pull request to master is created in the repository, allowing any relevant user to validate or evaluate features, bugfixes, or security hotfix. Then, as additional commits are added to the PR branch the preview environment is automatically updated. What happens when a Preview Environment is created \u00b6 a new ArgoCD Application of kind App is created in a ci kubernetes namespace which shows up in the argocd app list command so you can see which preview environments are active and switch into them to look around: $ argocd app list NAME CLUSTER NAMESPACE PROJECT STATUS HEALTH SYNCPOLICY CONDITIONS REPO PATH TARGET preview-3 https://kubernetes.default.svc ci default Synced Healthy Auto <none> https://github.com/netguru-interview/blog-helm-charts.git . the Pull Request is built as a preview Docker image and deployed into the preview environment via GitHub Workflow a comment is added to the Pull Request to let your team know the preview application is ready for testing with a link to open the application. So in one click your team members can try out the preview. Example ArgoCD Preview Environment \u00b6 What happens when a Pull Request is closed \u00b6 Once Pull Request is merged or closed (declined) - preview environment is automatically deleted and all underlying resources are released. For this to happen, pr-closed workflow is being executed when a specific event happens. For more information, refer to github workflow documentation , a comment is added to the Pull Request to let your team know the preview environment is deleted.","title":"Example"},{"location":"preview-environment-example/#preview-environment-example","text":"","title":"Preview Environment Example"},{"location":"preview-environment-example/#generating-a-preview-environment","text":"When the developer makes the change to their branch, with the ultimate goal of merging those branch changes into the master branch for deployment to production, they save their changes from within their integrated development environment (IDE) and commit it to the source repository, such as GitHub. The process to generate a preview environment is typically like committing code in a traditional development environment: A developer makes a branch to their local cloned source repository to create a new feature: $ git clone git@github.com:netguru-interview/blog.git $ cd blog $ git checkout -b DEV-feature1 The developer makes changes to the source code in their branch and adds the affected files to the commit queue: $ git add backend/flaskblog/models.py The developer commits the files adding a comment about what has changed: $ git commit -m \"added user model\" The developer runs git push to send the code back to the remote repository and create a pull request: $ git push origin DEV-feature1 Git CLI displays a link to create a pull request. The developer can highlight the URL, right-click and choose Open URL to see the GitHub page in their browser. GitHub Workflow creates a preview environment in the PR for the application changes and displays a link to evaluate the new feature: The preview environment is created whenever a pull request to master is created in the repository, allowing any relevant user to validate or evaluate features, bugfixes, or security hotfix. Then, as additional commits are added to the PR branch the preview environment is automatically updated.","title":"Generating a preview environment"},{"location":"preview-environment-example/#what-happens-when-a-preview-environment-is-created","text":"a new ArgoCD Application of kind App is created in a ci kubernetes namespace which shows up in the argocd app list command so you can see which preview environments are active and switch into them to look around: $ argocd app list NAME CLUSTER NAMESPACE PROJECT STATUS HEALTH SYNCPOLICY CONDITIONS REPO PATH TARGET preview-3 https://kubernetes.default.svc ci default Synced Healthy Auto <none> https://github.com/netguru-interview/blog-helm-charts.git . the Pull Request is built as a preview Docker image and deployed into the preview environment via GitHub Workflow a comment is added to the Pull Request to let your team know the preview application is ready for testing with a link to open the application. So in one click your team members can try out the preview.","title":"What happens when a Preview Environment is created"},{"location":"preview-environment-example/#example-argocd-preview-environment","text":"","title":"Example ArgoCD Preview Environment"},{"location":"preview-environment-example/#what-happens-when-a-pull-request-is-closed","text":"Once Pull Request is merged or closed (declined) - preview environment is automatically deleted and all underlying resources are released. For this to happen, pr-closed workflow is being executed when a specific event happens. For more information, refer to github workflow documentation , a comment is added to the Pull Request to let your team know the preview environment is deleted.","title":"What happens when a Pull Request is closed"}]}